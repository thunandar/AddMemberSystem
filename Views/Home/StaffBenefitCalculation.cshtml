@model AddMemberSystem.Models.TB_Staff
@{
    ViewData["Title"] = "Benefit Calculation";
}

@Html.AntiForgeryToken()

<div class="container mt-4">
    <div class="row header-container">
        <div class="col-md-3 col-md-3 col-sm-12">
            <h2>Salary Calculation</h2>
        </div>
        <div class="col-md-2 col-md-2 col-sm-6 btn-save">
            <button id="saveButton" class="btn btn-success"><i class="fas fa-save"></i> Save</button>
        </div>
        <div class="col-md-2 col-md-2 col-sm-6">
            <button id="payNowButton" class="btn btn-success"><i class="fas fa-money-bill-wave"></i> Pay Now</button>
        </div>
    </div>


    <div class="row g-4">
        @foreach (var benefit in ViewBag.Benefits)
        {
            <div class="col-md-6">
                <div class="card h-100 @(benefit.Amount != "0" ? "border-success shadow" : "border-light")">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="card-title text-primary mb-1">
                                    @benefit.BenefitName
                                </h5>
                                @if (benefit.Amount != "0")
                                {
                                    <span class="badge bg-success">Selected</span>
                                }
                            </div>
                            <div class="form-check form-switch">
                                <input class="form-check-input"
                                       type="checkbox"
                                       role="switch"
                                @(benefit.Amount != "0" ? "checked" : "")
                                       disabled>
                            </div>
                        </div>
                        <div class="mt-3">
                            <p class="fs-5 mb-0">
                                Amount: <strong>@benefit.Amount</strong>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Excess Leave Card -->
        <div class="col-md-6">
            <div class="card h-100 @(ViewBag.ExcessLeaveDays > 0 ? "border-success shadow" : "border-light")">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title text-primary mb-1">
                                Excess Leave
                            </h5>
                            @if (ViewBag.ExcessLeaveDays > 0)
                            {
                                <span class="badge bg-success">Available</span>
                            }
                        </div>
                        <div class="form-check form-switch">
                            <input class="form-check-input"
                                   type="checkbox"
                                   role="switch"
                            @(ViewBag.ExcessLeaveDays > 0 ? "checked" : "")
                                   disabled>
                        </div>
                    </div>
                    <div class="mt-3">
                        <p class="fs-5 mb-0">
                            Leave Days: <strong>@ViewBag.ExcessLeaveDays</strong>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Salary Deduction Card -->
        <div class="col-md-6">
            <div class="card h-100 border-danger shadow">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="card-title text-danger mb-1">
                                Salary Deduction (Excess Leave)
                            </h5>
                        </div>
                    </div>
                    <div class="mt-3">
                        <p class="fs-5 mb-0">
                            Amount: <strong>@ViewBag.SalaryDeduction.ToString("N0")</strong>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Basic Salary -->
    <div class="row mt-5">
        <div class="col-md-12">
            <div class="total-card p-4">
                <h3 class="text-end mb-0">
                    Basic Salary: <span class="text-success">@ViewBag.BasicSalary.ToString("N0")</span>
                </h3>
            </div>
        </div>
    </div>

    <!-- Total Deductables -->
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="total-card p-4">
                <h3 class="text-end mb-0">
                    Total Deductables for @ViewBag.MonthName: <span class="text-success">@ViewBag.TotalDeductables.ToString("N0")</span>
                </h3>
            </div>
        </div>
    </div>

    <!-- Net Salary Payment -->
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="total-card p-4">
                <h3 class="text-end mb-0">
                    Net Salary Payment: <span class="text-success">@ViewBag.NetSalaryPayment.ToString("N0")</span>
                </h3>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        padding:10px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .total-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }

    .header-container {
        align-items: center;
        display: flex;
        margin-bottom:20px;
    }
    .header-container button {
        width: 140px;
        margin-top: 10px;
            background-color: #37ab37;
    }

    .header-container button i {
        margin-right: 5px;
    }

    .btn-save {
        display: flex;
        justify-content: flex-end;
    }
</style>



<!-- Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

@section Scripts {
    <script>
        document.getElementById("saveButton").addEventListener("click", function () {
            if (confirm("Are you sure you want to save this salary calculation?")) {
                const data = {
                    StaffID: "@Model.StaffID", // Ensure this is a string
                    BaseSalary: @ViewBag.BasicSalary,
                    Deductions: @ViewBag.TotalDeductables,
                    MonthOfSalary: "@ViewBag.MonthName",
                    YearOfSalary: new Date().getFullYear(), // Current year
                    IsDeleted: false,
                    // CreatedDate is set server-side
                };

                fetch("@Url.Action("SaveSalary", "Home")", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (response.ok) {
                            alert("Saved successfully!");
                        } else {
                            response.text().then(text => alert("Failed: " + text));
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred.");
                    });
            }
        });

        //Paynow button
        document.getElementById("payNowButton").addEventListener("click", function () {
            // Confirm with the user
            if (confirm("Are you sure you want to process the payment?")) {
                // Prepare the data to save/update
                const data = {
                    StaffID: "@Model.StaffID", // Staff ID from the model
                    TotalSalary: @ViewBag.NetSalaryPayment, // Net Salary Payment
                    PaymentDate: new Date().toISOString(), // Current Date and Time
                    IsDeleted: false
                };

                // Send the data to the server
                fetch("@Url.Action("ProcessPayment", "Home")", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (response.ok) {
                            alert("Payment processed successfully!");
                        } else {
                            alert("Failed to process payment.");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while processing payment.");
                    });
            }
        });
    </script>
}